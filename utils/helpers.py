import logging
import os
from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from typing import Optional, Dict

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ë–î –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
db = None

def set_db(database):
    """–ò–Ω—ä–µ–∫—Ü–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —É—Ç–∏–ª–∏—Ç–∞—Ö."""
    global db
    db = database

logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º ADMIN_IDS –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip().isdigit()]

async def check_admin(message: types.Message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if message.from_user.id not in ADMIN_IDS:
        from utils.keyboards import get_start_keyboard
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.",
            reply_markup=get_start_keyboard()
        )
        return False
    return True

async def is_user_banned(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        if db is None:
            return False
        user = db.get_user_by_id(user_id)
        if user and user.get('is_banned', False):
            return True
        return False
    except Exception as e:
        logger.error(f"Error checking user ban status: {e}")
        return False

async def cancel_state(message: types.Message, state: FSMContext) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        is_admin = message.from_user.id in ADMIN_IDS
        
        if is_admin:
            from utils.keyboards import get_admin_keyboard
            await message.answer(
                "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                reply_markup=get_admin_keyboard()
            )
        else:
            from utils.keyboards import get_start_keyboard
            await message.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
            await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:", reply_markup=get_start_keyboard())
        
        return True
    return False

async def send_error_message(message: types.Message, error_text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    try:
        if reply_markup is None:
            await message.answer(f"‚ùå {error_text}")
        else:
            await message.answer(f"‚ùå {error_text}", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error sending error message: {e}")

async def send_success_message(message: types.Message, success_text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    try:
        if reply_markup is None:
            await message.answer(f"‚úÖ {success_text}")
        else:
            await message.answer(f"‚úÖ {success_text}", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error sending success message: {e}")

async def send_info_message(message: types.Message, info_text: str, reply_markup=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if reply_markup is None:
            await message.answer(f"‚ÑπÔ∏è {info_text}")
        else:
            await message.answer(f"‚ÑπÔ∏è {info_text}", reply_markup=reply_markup)
    except Exception as e:
        logger.error(f"Error sending info message: {e}")

def format_user_list(users: list, max_length: int = 3800) -> list:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
    if not users:
        return ["üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."]
    
    parts = []
    current_part = ""
    header = f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–≤—Å–µ–≥–æ: {len(users)})</b>\n\n"
    
    for i, user in enumerate(users):
        try:
            status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.get('is_banned', False) else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            username_text = f"@{user['username']}" if user.get('username') else "–ë–µ–∑ username"
            
            user_text = f"üë§ {user.get('full_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}\n"
            user_text += f"üÜî ID: {user['user_id']}\n"
            user_text += f"üìù Username: {username_text}\n"
            user_text += f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            user_text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.get('first_seen', '')[:16]}\n"
            user_text += f"üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.get('last_activity', '')[:16]}\n"
            user_text += "‚îÄ" * 30 + "\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–ª—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
            test_length = len(header) + len(current_part) + len(user_text) if not current_part else len(current_part) + len(user_text)
            
            if test_length > max_length and current_part:
                parts.append(current_part.rstrip())
                current_part = user_text
            else:
                current_part += user_text
                
        except Exception as e:
            logger.error(f"Error formatting user {i}: {e}")
            current_part += f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
    
    if current_part:
        parts.append(current_part.rstrip())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ —á–∞—Å—Ç—è–º
    formatted_parts = []
    for i, part in enumerate(parts):
        if i == 0:
            formatted_parts.append(header + part)
        else:
            formatted_parts.append(f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—á–∞—Å—Ç—å {i + 1})</b>\n\n{part}")
    
    return formatted_parts

def format_channel_list(channels: list, max_length: int = 3800) -> list:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
    if not channels:
        return ["üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç."]
    
    parts = []
    current_part = ""
    header = f"üì¢ <b>–ö–∞–Ω–∞–ª—ã (–≤—Å–µ–≥–æ: {len(channels)})</b>\n\n"
    
    for i, channel in enumerate(channels):
        try:
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if channel.get('is_active', True) else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
            bot_status = "üëë –ê–¥–º–∏–Ω" if channel.get('bot_is_admin', False) else "üë§ –£—á–∞—Å—Ç–Ω–∏–∫"
            username_text = f"@{channel['username']}" if channel.get('username') else "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
            
            channel_text = f"üì¢ <b>{channel['title']}</b>\n"
            channel_text += f"üÜî ID: {channel['chat_id']}\n"
            channel_text += f"üîó Username: {username_text}\n"
            channel_text += f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {bot_status}\n"
            channel_text += f"üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞: {status}\n"
            channel_text += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {channel.get('added_at', '')[:16]}\n"
            channel_text += "‚îÄ" * 30 + "\n\n"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
            test_length = len(header) + len(current_part) + len(channel_text) if not current_part else len(current_part) + len(channel_text)
            
            if test_length > max_length and current_part:
                parts.append(current_part.rstrip())
                current_part = channel_text
            else:
                current_part += channel_text
                
        except Exception as e:
            logger.error(f"Error formatting channel {i}: {e}")
            current_part += f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–∞\n\n"
    
    if current_part:
        parts.append(current_part.rstrip())
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫ —á–∞—Å—Ç—è–º
    formatted_parts = []
    for i, part in enumerate(parts):
        if i == 0:
            formatted_parts.append(header + part)
        else:
            formatted_parts.append(f"üì¢ <b>–ö–∞–Ω–∞–ª—ã (—á–∞—Å—Ç—å {i + 1})</b>\n\n{part}")
    
    return formatted_parts

def format_datetime(dt_string: str, format_type: str = "short") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        if not dt_string:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
        if "T" in dt_string:
            dt = datetime.fromisoformat(dt_string.replace('Z', '+00:00'))
        else:
            dt = datetime.fromisoformat(dt_string)
        
        if format_type == "short":
            return dt.strftime('%d.%m.%Y %H:%M')
        elif format_type == "date":
            return dt.strftime('%d.%m.%Y')
        elif format_type == "time":
            return dt.strftime('%H:%M:%S')
        else:
            return dt.strftime('%d.%m.%Y %H:%M:%S')
            
    except Exception as e:
        logger.error(f"Error formatting datetime {dt_string}: {e}")
        return dt_string

def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞"""
    try:
        if size_bytes == 0:
            return "0 B"
        
        size_names = ["B", "KB", "MB", "GB"]
        i = 0
        while size_bytes >= 1024 and i < len(size_names) - 1:
            size_bytes /= 1024.0
            i += 1
        
        return f"{size_bytes:.1f} {size_names[i]}"
    except:
        return "Unknown"

def truncate_text(text: str, max_length: int = 50) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏—è"""
    if len(text) <= max_length:
        return text
    return f"{text[:max_length-3]}..."

def format_percentage(value: float, decimal_places: int = 1) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤"""
    try:
        return f"{value:.{decimal_places}f}%"
    except:
        return "0%"

def format_number_with_spaces(number: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–ª–∞ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä—è–¥–æ–≤"""
    try:
        return f"{number:,}".replace(",", " ")
    except:
        return str(number)

async def safe_send_message(bot, chat_id: int, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Error sending message to {chat_id}: {e}")
        return None

async def safe_edit_message(message: types.Message, text: str, **kwargs):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        return await message.edit_text(text, **kwargs)
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        return None

async def safe_delete_message(message: types.Message):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await message.delete()
        return True
    except Exception as e:
        logger.error(f"Error deleting message: {e}")
        return False

def validate_chat_id(chat_id_str: str) -> Optional[int]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ chat_id"""
    try:
        chat_id = int(chat_id_str)
        # Telegram chat_id –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –æ–±—ã—á–Ω–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ
        if abs(chat_id) > 10**9:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            return chat_id
        return None
    except ValueError:
        return None

def generate_usage_report(stats: Dict) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
    try:
        report = f"üìä <b>–û—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏</b>\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'overall_stats' in stats:
            overall = stats['overall_stats']
            report += f"üìà <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            report += f"üì¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {overall.get('active_channels', 0)}\n"
            report += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {overall.get('total_users', 0)}\n"
            report += f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {overall.get('active_links', 0)}\n"
            report += f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {overall.get('links_used_today', 0)}\n\n"
        
        # –¢–æ–ø –∫–∞–Ω–∞–ª—ã
        if 'top_channels' in stats and stats['top_channels']:
            report += f"üèÜ <b>–¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
            for i, channel in enumerate(stats['top_channels'][:5], 1):
                title = truncate_text(channel['title'], 25)
                report += f"{i}. {title}: {channel['total_used']} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π\n"
            report += "\n"
        
        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if 'user_behavior' in stats:
            behavior = stats['user_behavior']
            patterns = behavior.get('behavior_patterns', {})
            report += f"üë• <b>–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
            report += f"üìä –°—Ä–µ–¥–Ω–µ–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {patterns.get('avg_links_per_user', 0)}\n"
            report += f"üìà –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {format_percentage(patterns.get('avg_usage_rate', 0))}\n\n"
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        if 'system_health' in stats:
            health = stats['system_health']
            report += f"üè• <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:</b> {health.get('system_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            
            if 'issues' in health and health['issues']:
                report += f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b>\n"
                for issue in health['issues'][:3]:
                    report += f"   ‚Ä¢ {issue}\n"
        
        return report
        
    except Exception as e:
        logger.error(f"Error generating usage report: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞"

def create_backup_filename() -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è –±—ç–∫–∞–ø–∞"""
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    return f"bot_backup_{timestamp}.db"

async def notify_admins_error(bot, error_message: str, context: str = None):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ"""
    try:
        notification = f"üö® <b>–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ!</b>\n\n"
        if context:
            notification += f"üìç –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context}\n"
        notification += f"‚ùå –û—à–∏–±–∫–∞: {error_message}\n"
        notification += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        
        for admin_id in ADMIN_IDS:
            try:
                await bot.send_message(admin_id, notification, parse_mode="HTML")
            except Exception as e:
                logger.error(f"Failed to notify admin {admin_id} about error: {e}")
                
    except Exception as e:
        logger.error(f"Error in notify_admins_error: {e}")

async def log_user_action(user_id: int, action: str, details: str = None):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        log_entry = f"User {user_id}: {action}"
        if details:
            log_entry += f" - {details}"
        
        logger.info(log_entry)
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ª–æ–≥–æ–≤
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
        
    except Exception as e:
        logger.error(f"Error logging user action: {e}")

def sanitize_input(text: str, max_length: int = 1000) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    try:
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        sanitized = text.strip()[:max_length]
        
        # –£–±–∏—Ä–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è HTML
        dangerous_chars = ['<script', 'javascript:', 'onload=', 'onerror=']
        for char in dangerous_chars:
            sanitized = sanitized.replace(char, '')
        
        return sanitized
        
    except Exception as e:
        logger.error(f"Error sanitizing input: {e}")
        return ""

def calculate_time_remaining(expire_date_str: str) -> str:
    """–†–∞—Å—á–µ—Ç –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è"""
    try:
        if isinstance(expire_date_str, str):
            expire_date = datetime.fromisoformat(expire_date_str.replace('Z', '+00:00'))
        else:
            expire_date = expire_date_str
        
        now = datetime.now()
        
        if expire_date <= now:
            return "–ò—Å—Ç–µ–∫–ª–∞"
        
        time_diff = expire_date - now
        
        if time_diff.days > 0:
            return f"{time_diff.days} –¥–Ω."
        elif time_diff.seconds > 3600:
            hours = time_diff.seconds // 3600
            return f"{hours} —á."
        elif time_diff.seconds > 60:
            minutes = time_diff.seconds // 60
            return f"{minutes} –º–∏–Ω."
        else:
            return "< 1 –º–∏–Ω."
            
    except Exception as e:
        logger.error(f"Error calculating time remaining: {e}")
        return "–û—à–∏–±–∫–∞"

async def get_channel_member_count(bot, chat_id: str) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞"""
    try:
        member_count = await bot.get_chat_member_count(chat_id)
        return member_count
    except Exception as e:
        logger.error(f"Error getting member count for {chat_id}: {e}")
        return 0

def format_stats_summary(stats: Dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        summary = "üìä <b>–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞:</b>\n\n"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        channels = stats.get('overall_stats', {}).get('active_channels', 0)
        users = stats.get('overall_stats', {}).get('total_users', 0)
        links = stats.get('overall_stats', {}).get('active_links', 0)
        today_usage = stats.get('overall_stats', {}).get('links_used_today', 0)
        
        summary += f"üì¢ –ö–∞–Ω–∞–ª–æ–≤: {channels}\n"
        summary += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users}\n"
        summary += f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {links}\n"
        summary += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {today_usage}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        if 'system_health' in stats:
            health_status = stats['system_health'].get('system_status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            summary += f"\nüè• –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {health_status}"
        
        return summary
        
    except Exception as e:
        logger.error(f"Error formatting stats summary: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"