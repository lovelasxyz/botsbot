import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict

logger = logging.getLogger(__name__)

def get_start_keyboard():
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    kb = [
        [InlineKeyboardButton(text='üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã', callback_data='get_links')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_links_keyboard(channels_with_links: List[Dict]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"""
    kb = []
    
    for channel_data in channels_with_links:
        channel_title = channel_data['channel_title']
        invite_link = channel_data['invite_link']
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        button_text = channel_title if len(channel_title) <= 30 else f"{channel_title[:27]}..."
        
        kb.append([InlineKeyboardButton(
            text=f"{button_text}", 
            url=invite_link
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    kb.append([InlineKeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏', callback_data='refresh_links')])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_admin_keyboard():
    """–û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    kb = [
        [KeyboardButton(text='üì¢ –ö–∞–Ω–∞–ª—ã'), KeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')],
        [KeyboardButton(text='ü§ñ –ö–ª–æ–Ω—ã'), KeyboardButton(text='üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ')],
        [KeyboardButton(text='üîó –¢–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False, is_persistent=True)

def get_channel_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏"""
    kb = [
        [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'), KeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤')],
        [KeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False, is_persistent=True)

def get_user_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    kb = [
        [KeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False, is_persistent=True)

def get_settings_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    kb = [
        [KeyboardButton(text='‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫')],
        [KeyboardButton(text='üî¢ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π')],
        [KeyboardButton(text='üîí –ö–∞–ø—á–∞: –≤–∫–ª/–≤—ã–∫–ª')],
        [KeyboardButton(text='‚úèÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ')],
        [KeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False, is_persistent=True)

def get_stats_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    kb = [
        [KeyboardButton(text='üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')],
        [KeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False, is_persistent=True)

def get_maintenance_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    kb = [
        [KeyboardButton(text='üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ')],
        [KeyboardButton(text='üîÑ –ü–µ—Ä–µ–≥–µ–Ω. –≤—Å–µ —Å—Å—ã–ª–∫–∏')],
        [KeyboardButton(text='üìã –ò–Ω—Ñ–æ –æ –ë–î')],
        [KeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False, is_persistent=True)

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    kb = [
        [KeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_yes_no_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    kb = [
        [KeyboardButton(text='‚úÖ –î–∞'), KeyboardButton(text='‚ùå –ù–µ—Ç')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_back_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    kb = [
        [KeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def get_channel_selection_keyboard(channels: List[Dict]):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞"""
    kb = []
    for channel in channels:
        button_text = channel['title']
        if len(button_text) > 30:
            button_text = f"{button_text[:27]}..."
        
        kb.append([InlineKeyboardButton(
            text=f"üì¢ {button_text}", 
            callback_data=f"select_channel_{channel['id']}"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_channel_stats_keyboard(channel_id: int):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    kb = [
        [InlineKeyboardButton(text='üìÖ –ó–∞ –¥–µ–Ω—å', callback_data=f'stats_day_{channel_id}')],
        [InlineKeyboardButton(text='üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é', callback_data=f'stats_week_{channel_id}')],
        [InlineKeyboardButton(text='üìÖ –ó–∞ –º–µ—Å—è—Ü', callback_data=f'stats_month_{channel_id}')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_stats')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_user_action_keyboard(user_id: int):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    kb = [
        [InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f'user_stats_{user_id}')],
        [InlineKeyboardButton(text='üîó –ò—Å—Ç–æ—Ä–∏—è —Å—Å—ã–ª–æ–∫', callback_data=f'user_links_{user_id}')],
        [InlineKeyboardButton(text='üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'ban_user_{user_id}')],
        [InlineKeyboardButton(text='üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data=f'message_user_{user_id}')]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)

def create_pagination_keyboard(current_page: int, total_pages: int, callback_prefix: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    kb = []
    
    if total_pages > 1:
        row = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥—ã–¥—É—â–∞—è"
        if current_page > 1:
            row.append(InlineKeyboardButton(
                text='‚óÄÔ∏è –ü—Ä–µ–¥', 
                callback_data=f'{callback_prefix}_page_{current_page - 1}'
            ))
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        row.append(InlineKeyboardButton(
            text=f'{current_page}/{total_pages}',
            callback_data='page_info'
        ))
        
        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∞—è"
        if current_page < total_pages:
            row.append(InlineKeyboardButton(
                text='–°–ª–µ–¥ ‚ñ∂Ô∏è', 
                callback_data=f'{callback_prefix}_page_{current_page + 1}'
            ))
        
        kb.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_clone_management_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª–æ–Ω–∞–º–∏"""
    kb = [
        [KeyboardButton(text='‚ûï –°–æ–∑–¥–∞—Ç—å –∫–ª–æ–Ω'), KeyboardButton(text='üìã –°–ø–∏—Å–æ–∫ –∫–ª–æ–Ω–æ–≤')],
        [KeyboardButton(text='üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã')],
        [KeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ')]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False, is_persistent=True)

def get_clone_action_keyboard(clone_id: str, status: str, bot_username: str = None):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–ª–æ–Ω–æ–º"""
    kb = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å username)
    if bot_username and status == "running":
        kb.append([InlineKeyboardButton(text='üöÄ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞', url=f'https://t.me/{bot_username}')])
    
    if status == "stopped":
        kb.append([InlineKeyboardButton(text='‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å', callback_data=f'start_clone_{clone_id}')])
    elif status == "running":
        kb.append([InlineKeyboardButton(text='‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data=f'stop_clone_{clone_id}')])
    
    kb.extend([
        [InlineKeyboardButton(text='üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data=f'clone_stats_{clone_id}')],
        [InlineKeyboardButton(text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data=f'clone_settings_{clone_id}')],
        [InlineKeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_clone_{clone_id}')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data='back_to_clones')]
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)

def get_clone_list_keyboard(clones):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–ª–æ–Ω–æ–≤"""
    kb = []
    
    for clone in clones:
        status_emoji = {
            "running": "üü¢",
            "stopped": "üî¥", 
            "error": "üü°"
        }.get(clone.status, "‚ö´")
        
        button_text = f"{status_emoji} {clone.name}"
        if len(button_text) > 30:
            button_text = f"{status_emoji} {clone.name[:25]}..."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –∫–ª–æ–Ω–∞    
        kb.append([InlineKeyboardButton(
            text=button_text,
            callback_data=f'manage_clone_{clone.id}'
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=kb)