import os
import logging
import asyncio
import signal
import sys
import traceback
import json
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BotCommand, BotCommandScopeDefault

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ .env
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–ª–æ–Ω–æ–≤: –∏—Å–ø–æ–ª—å–∑—É–µ–º INSTANCE_TOKEN –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ –∫–ª–æ–Ω
RUN_AS_CHILD = os.getenv('RUN_AS_CHILD', '0') == '1'
BOT_TOKEN = os.getenv('INSTANCE_TOKEN') or os.getenv('BOT_TOKEN')
DATABASE_PATH = os.getenv('INSTANCE_DB') or os.getenv('DATABASE_PATH', 'data/bot.db')
ADMIN_IDS_STR = os.getenv('ADMIN_IDS', '')
ADMIN_IDS = [int(x.strip()) for x in ADMIN_IDS_STR.split(',') if x.strip().isdigit()]
LINK_EXPIRE_HOURS = int(os.getenv('LINK_EXPIRE_HOURS', '1'))
MAX_LINK_USES = int(os.getenv('MAX_LINK_USES', '1'))
AUTO_GENERATE_LINKS = os.getenv('AUTO_GENERATE_LINKS', 'true').lower() == 'true'
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO')
SETTINGS_FILE = os.getenv('INSTANCE_SETTINGS') or os.getenv('SETTINGS_FILE', 'bot_settings.json')

from handlers import register_all_handlers
from database import Database
# –£–±—Ä–∞–Ω—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞/–æ—á–∏—Å—Ç–∫–∏/—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs('logs', exist_ok=True)
# –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º UTF-8 –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –Ω–∞ Windows
try:
    if hasattr(sys.stdout, 'reconfigure'):
        sys.stdout.reconfigure(encoding='utf-8', errors='replace')
except Exception:
    pass
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def validate_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    if not BOT_TOKEN:
        raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    if not ADMIN_IDS:
        logger.warning("ADMIN_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–∫–∞ –≤—ã –Ω–µ –∑–∞–¥–∞–¥–∏—Ç–µ ADMIN_IDS –≤ .env")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs('data', exist_ok=True)
    os.makedirs('logs', exist_ok=True)
    os.makedirs('assets', exist_ok=True)
    
    return True

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞
def load_bot_settings():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        logger.error(f"Error loading bot settings: {e}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        "welcome_message": f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {{bot_name}}!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.

üîí –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
‚è∞ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {LINK_EXPIRE_HOURS} —á–∞—Å–æ–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫!""",
        "link_generation_enabled": True,
        "require_captcha": True
    }

def save_bot_settings(settings):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        logger.error(f"Error saving bot settings: {e}")
        return False

def get_welcome_message():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—à–∞–±–ª–æ–Ω —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–º bot_name)"""
    settings = load_bot_settings()
    return settings.get("welcome_message", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {bot_name}!")

def update_welcome_message(new_message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    settings = load_bot_settings()
    settings["welcome_message"] = new_message
    return save_bot_settings(settings)

def get_bot_setting(key, default=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    settings = load_bot_settings()
    return settings.get(key, default)

def update_bot_setting(key, value):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"""
    settings = load_bot_settings()
    settings[key] = value
    return save_bot_settings(settings)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(DATABASE_PATH, LINK_EXPIRE_HOURS, MAX_LINK_USES)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã

async def setup_bot_commands():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    commands = [
        BotCommand(command="start", description="üöÄ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã"),
        BotCommand(command="refresh", description="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏"),
    ]
    
    await bot.set_my_commands(commands, BotCommandScopeDefault())
    logger.info("Bot commands set successfully")

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        validate_config()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("Initializing database...")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
        await setup_bot_commands()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        clone_prefix = "[CLONE] " if RUN_AS_CHILD else ""
        logger.info(f"{clone_prefix}Bot started: @{bot_info.username} ({bot_info.full_name})")
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∫–∞–Ω–∞–ª–æ–≤ —Å Telegram (–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–Ω—ã—Ö)
        try:
            active_channels = db.get_active_channels()
            removed_count = 0
            admin_changed_count = 0
            for channel in active_channels:
                chat_id = channel['chat_id']
                try:
                    member = await bot.get_chat_member(chat_id, bot.id)
                    status = getattr(member, 'status', None)
                    status_value = getattr(status, 'value', str(status))
                    if status_value in ('left', 'kicked'):
                        if db.remove_channel(chat_id):
                            removed_count += 1
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                        is_admin_now = status_value == 'administrator'
                        if bool(channel.get('bot_is_admin')) != is_admin_now:
                            if db.update_channel(chat_id, bot_is_admin=is_admin_now):
                                admin_changed_count += 1
                except Exception as e:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                    logger.warning(f"Failed to get membership for channel {chat_id}: {e}")
                    if db.remove_channel(chat_id):
                        removed_count += 1
            if removed_count or admin_changed_count:
                logger.info(f"Channels sync: deactivated {removed_count}, admin flag updated {admin_changed_count}")
        except Exception as e:
            logger.error(f"Error during channels sync: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        expired_count = db.cleanup_expired_links()
        if expired_count > 0:
            logger.info(f"Cleaned up {expired_count} expired links on startup")
        
        logger.info("ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
    except Exception as e:
        logger.error(f"Error during startup: {e}")
        raise

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞...")
    
    try:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.close()
        logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        await bot.session.close()
        logger.info("‚úÖ –°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞")
        
    except Exception as e:
        logger.error(f"Error during shutdown: {e}")
    
    logger.info("üèÅ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class GracefulShutdown:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self.shutdown_event = asyncio.Event()
        
    def setup_signal_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if sys.platform != "win32":
            # Unix-like —Å–∏—Å—Ç–µ–º—ã
            loop = asyncio.get_event_loop()
            for sig in (signal.SIGTERM, signal.SIGINT):
                loop.add_signal_handler(sig, self.signal_handler)
        else:
            # Windows
            signal.signal(signal.SIGINT, self.signal_handler)
            signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, signum=None, frame=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {signum}")
        self.shutdown_event.set()

# –£–¥–∞–ª–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    shutdown_handler = GracefulShutdown()
    
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        register_all_handlers(dp, bot, db, ADMIN_IDS, get_welcome_message, update_welcome_message)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        shutdown_handler.setup_signal_handlers()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await on_startup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥ –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        polling_task = asyncio.create_task(dp.start_polling(bot, skip_updates=True))
        shutdown_task = asyncio.create_task(shutdown_handler.shutdown_event.wait())
        
        done, pending = await asyncio.wait([polling_task, shutdown_task], return_when=asyncio.FIRST_COMPLETED)
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–æ—Ç–∞...")
        
        for task in pending:
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass
        
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        error_message = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n\n{traceback.format_exc()}"
        logger.error(error_message)
    finally:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
        await on_shutdown()

if __name__ == '__main__':
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        traceback.print_exc()
    finally:
        print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")