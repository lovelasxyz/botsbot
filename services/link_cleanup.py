import asyncio
import logging
import os
import glob
from datetime import datetime, timedelta
from typing import Dict

logger = logging.getLogger(__name__)

class LinkCleanupService:
    """–°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫ –∏ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, database):
        self.db = database
        self.cleanup_task = None
        self.is_running = False
        self.cleanup_interval = 3600  # 1 —á–∞—Å
        
    async def start_cleanup_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        if self.is_running:
            logger.warning("Cleanup scheduler is already running")
            return
        
        self.is_running = True
        self.cleanup_task = asyncio.create_task(self._cleanup_loop())
        logger.info("Link cleanup scheduler started")
    
    async def stop_cleanup_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        self.is_running = False
        
        if self.cleanup_task and not self.cleanup_task.done():
            self.cleanup_task.cancel()
            try:
                await self.cleanup_task
            except asyncio.CancelledError:
                pass
        
        logger.info("Link cleanup scheduler stopped")
    
    async def _cleanup_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏"""
        while self.is_running:
            try:
                await asyncio.sleep(self.cleanup_interval)
                
                if not self.is_running:
                    break
                
                logger.info("üßπ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞...")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–∏–ø—ã –æ—á–∏—Å—Ç–∫–∏
                results = await self.perform_full_cleanup()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                total_cleaned = sum(results.values())
                if total_cleaned > 0:
                    logger.info(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
                
            except asyncio.CancelledError:
                logger.info("Cleanup loop cancelled")
                break
            except Exception as e:
                logger.error(f"Error in cleanup loop: {e}")
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
    
    async def perform_full_cleanup(self) -> Dict[str, int]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        results = {
            'expired_links': 0,
            'old_usage_records': 0,
            'inactive_channels': 0,
            'orphaned_stats': 0,
            'temp_files': 0
        }
        
        try:
            # –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫
            results['expired_links'] = self.db.cleanup_expired_links()
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
            results['old_usage_records'] = self.db.cleanup_old_usage_records(days=30)
            
            # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            results['inactive_channels'] = await self._cleanup_old_inactive_channels()
            
            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π)
            results['orphaned_stats'] = await self._cleanup_old_stats()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            results['temp_files'] = await self._cleanup_temp_files()
            
            logger.info(f"Full cleanup completed: {results}")
            
        except Exception as e:
            logger.error(f"Error in full cleanup: {e}")
        
        return results
    
    async def _cleanup_old_inactive_channels(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            cleanup_date = datetime.now() - timedelta(days=7)
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –±–æ–ª–µ–µ 7 –¥–Ω–µ–π
            self.db.cursor.execute('''
            DELETE FROM channels 
            WHERE is_active = 0 AND updated_at <= ?
            ''', (cleanup_date,))
            
            deleted_count = self.db.cursor.rowcount
            self.db.connection.commit()
            
            if deleted_count > 0:
                logger.info(f"Cleaned up {deleted_count} old inactive channels")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"Error cleaning up old inactive channels: {e}")
            return 0
    
    async def _cleanup_old_stats(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            cleanup_date = datetime.now() - timedelta(days=90)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å—Ç–∞—Ä—à–µ 90 –¥–Ω–µ–π
            self.db.cursor.execute('''
            DELETE FROM channel_stats WHERE date <= ?
            ''', (cleanup_date.date(),))
            
            deleted_count = self.db.cursor.rowcount
            self.db.connection.commit()
            
            if deleted_count > 0:
                logger.info(f"Cleaned up {deleted_count} old stats records")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"Error cleaning up old stats: {e}")
            return 0
    
    async def _cleanup_temp_files(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            temp_patterns = [
                "temp_*.*", 
                "*.tmp", 
                "*.temp",
                "logs/*.log.*",  # –†–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–æ–≥–∏ —Å—Ç–∞—Ä—à–µ –Ω–µ–¥–µ–ª–∏
                "data/*.db-wal",  # SQLite WAL —Ñ–∞–π–ª—ã
                "data/*.db-shm"   # SQLite shared memory —Ñ–∞–π–ª—ã
            ]
            
            deleted_count = 0
            week_ago = datetime.now() - timedelta(days=7)
            
            for pattern in temp_patterns:
                try:
                    files = glob.glob(pattern)
                    for file_path in files:
                        try:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ñ–∞–π–ª–∞
                            file_mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
                            
                            if file_mtime < week_ago:
                                os.remove(file_path)
                                deleted_count += 1
                                logger.debug(f"Deleted temp file: {file_path}")
                                
                        except (OSError, IOError) as e:
                            logger.warning(f"Could not delete temp file {file_path}: {e}")
                            
                except Exception as e:
                    logger.error(f"Error processing temp pattern {pattern}: {e}")
            
            if deleted_count > 0:
                logger.info(f"Cleaned up {deleted_count} temporary files")
            
            return deleted_count
            
        except Exception as e:
            logger.error(f"Error cleaning up temp files: {e}")
            return 0
    
    async def cleanup_user_links(self, user_id: int) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.cursor.execute('''
            UPDATE personal_invite_links 
            SET is_active = 0, used_at = CURRENT_TIMESTAMP
            WHERE user_id = ? AND is_active = 1
            ''', (user_id,))
            
            deactivated_count = self.db.cursor.rowcount
            self.db.connection.commit()
            
            logger.info(f"Deactivated {deactivated_count} links for user {user_id}")
            return deactivated_count
            
        except Exception as e:
            logger.error(f"Error cleaning up user links: {e}")
            return 0
    
    async def cleanup_channel_links(self, channel_id: int) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞
            self.db.cursor.execute('''
            UPDATE personal_invite_links 
            SET is_active = 0 
            WHERE channel_id = ? AND is_active = 1
            ''', (channel_id,))
            
            deactivated_count = self.db.cursor.rowcount
            self.db.connection.commit()
            
            logger.info(f"Deactivated {deactivated_count} links for channel {channel_id}")
            return deactivated_count
            
        except Exception as e:
            logger.error(f"Error cleaning up channel links: {e}")
            return 0
    
    async def emergency_cleanup(self) -> Dict[str, int]:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        logger.warning("Performing emergency cleanup...")
        
        results = {
            'all_links_deactivated': 0,
            'usage_records_deleted': 0,
            'temp_files_cleaned': 0,
            'cache_cleared': 0
        }
        
        try:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏
            self.db.cursor.execute('''
            UPDATE personal_invite_links SET is_active = 0 WHERE is_active = 1
            ''')
            results['all_links_deactivated'] = self.db.cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä—à–µ 1 –¥–Ω—è
            cleanup_date = datetime.now() - timedelta(days=1)
            self.db.cursor.execute('''
            DELETE FROM link_usage WHERE used_at <= ?
            ''', (cleanup_date,))
            results['usage_records_deleted'] = self.db.cursor.rowcount
            
            self.db.connection.commit()
            
            # –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è)
            temp_patterns = ["temp_*.*", "*.tmp", "*.temp", "*cache*", "*.bak"]
            for pattern in temp_patterns:
                files = glob.glob(pattern)
                for temp_file in files:
                    try:
                        os.remove(temp_file)
                        results['temp_files_cleaned'] += 1
                    except:
                        pass
            
            # –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ SQLite
            try:
                self.db.cursor.execute('VACUUM')
                self.db.cursor.execute('PRAGMA optimize')
                self.db.connection.commit()
                results['cache_cleared'] = 1
                logger.info("SQLite database optimized")
            except Exception as e:
                logger.error(f"Error optimizing database: {e}")
            
            logger.warning(f"Emergency cleanup completed: {results}")
            
        except Exception as e:
            logger.error(f"Error in emergency cleanup: {e}")
        
        return results
    
    async def get_cleanup_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –æ—á–∏—Å—Ç–∫–∏"""
        try:
            now = datetime.now()
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫
            self.db.cursor.execute('''
            SELECT COUNT(*) as count FROM personal_invite_links 
            WHERE expire_date <= ? AND is_active = 1
            ''', (now,))
            expired_links = self.db.cursor.fetchone()['count']
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
            self.db.cursor.execute('''
            SELECT COUNT(*) as count FROM personal_invite_links 
            WHERE current_uses >= max_uses
            ''')
            used_up_links = self.db.cursor.fetchone()['count']
            
            # –°—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            old_date = now - timedelta(days=30)
            self.db.cursor.execute('''
            SELECT COUNT(*) as count FROM link_usage 
            WHERE used_at <= ?
            ''', (old_date,))
            old_usage_records = self.db.cursor.fetchone()['count']
            
            # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
            self.db.cursor.execute('''
            SELECT COUNT(*) as count FROM channels 
            WHERE is_active = 0
            ''')
            inactive_channels = self.db.cursor.fetchone()['count']
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                db_size = os.path.getsize(self.db.DATABASE_PATH)
                db_size_mb = round(db_size / (1024 * 1024), 2)
            except:
                db_size_mb = 0
            
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            temp_files_count = 0
            temp_patterns = ["temp_*.*", "*.tmp", "*.temp"]
            for pattern in temp_patterns:
                temp_files_count += len(glob.glob(pattern))
            
            return {
                'expired_links': expired_links,
                'used_up_links': used_up_links,
                'old_usage_records': old_usage_records,
                'inactive_channels': inactive_channels,
                'database_size_mb': db_size_mb,
                'temp_files_count': temp_files_count,
                'last_check': now.isoformat(),
                'cleanup_interval_hours': self.cleanup_interval / 3600,
                'recommendations': self._generate_cleanup_recommendations(
                    expired_links, used_up_links, old_usage_records, 
                    inactive_channels, temp_files_count
                )
            }
            
        except Exception as e:
            logger.error(f"Error getting cleanup statistics: {e}")
            return {'error': str(e)}
    
    def _generate_cleanup_recommendations(self, expired: int, used_up: int, old_records: int, 
                                        inactive: int, temp_files: int) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ—á–∏—Å—Ç–∫–µ"""
        recommendations = []
        
        if expired > 100:
            recommendations.append(f"üóëÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∏—Ç—å {expired} –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫")
        
        if used_up > 500:
            recommendations.append(f"üìä –ú–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ ({used_up}) - –º–æ–∂–Ω–æ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å")
        
        if old_records > 1000:
            recommendations.append(f"üìã –ú–Ω–æ–≥–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π ({old_records}) - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—á–∏—Å—Ç–∫–∞")
        
        if inactive > 10:
            recommendations.append(f"üì¢ –ú–Ω–æ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ ({inactive}) - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å")
        
        if temp_files > 20:
            recommendations.append(f"üìÅ –ú–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ ({temp_files}) - –æ—á–∏—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")
        
        if not recommendations:
            recommendations.append("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
        
        return recommendations
    
    def set_cleanup_interval(self, hours: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—á–∏—Å—Ç–∫–∏"""
        if 1 <= hours <= 168:  # –û—Ç 1 —á–∞—Å–∞ –¥–æ –Ω–µ–¥–µ–ª–∏
            self.cleanup_interval = hours * 3600
            logger.info(f"Cleanup interval set to {hours} hours")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.db.set_setting('cleanup_interval_hours', hours)
            return True
        else:
            logger.warning(f"Invalid cleanup interval: {hours} hours")
            return False
    
    async def force_cleanup_now(self) -> Dict[str, int]:
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"""
        logger.info("Force cleanup initiated by admin")
        return await self.perform_full_cleanup()
    
    async def cleanup_specific_user_data(self, user_id: int) -> Dict[str, int]:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            results = {
                'links_deactivated': 0,
                'usage_records_deleted': 0,
                'user_removed': 0
            }
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.cursor.execute('''
            UPDATE personal_invite_links 
            SET is_active = 0 
            WHERE user_id = ?
            ''', (user_id,))
            results['links_deactivated'] = self.db.cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            self.db.cursor.execute('''
            DELETE FROM link_usage 
            WHERE user_id = ?
            ''', (user_id,))
            results['usage_records_deleted'] = self.db.cursor.rowcount
            
            # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # self.db.cursor.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
            # results['user_removed'] = self.db.cursor.rowcount
            
            self.db.connection.commit()
            
            logger.info(f"Cleaned up data for user {user_id}: {results}")
            return results
            
        except Exception as e:
            logger.error(f"Error cleaning up user {user_id} data: {e}")
            return {'error': str(e)}
    
    async def cleanup_specific_channel_data(self, channel_id: int) -> Dict[str, int]:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        try:
            results = {
                'links_deleted': 0,
                'usage_records_deleted': 0,
                'stats_deleted': 0,
                'channel_removed': 0
            }
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∫–∞–Ω–∞–ª–∞
            self.db.cursor.execute('''
            DELETE FROM personal_invite_links 
            WHERE channel_id = ?
            ''', (channel_id,))
            results['links_deleted'] = self.db.cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞
            self.db.cursor.execute('''
            DELETE FROM channel_stats 
            WHERE channel_id = ?
            ''', (channel_id,))
            results['stats_deleted'] = self.db.cursor.rowcount
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º –∫–∞–Ω–∞–ª
            self.db.cursor.execute('''
            DELETE FROM channels 
            WHERE id = ?
            ''', (channel_id,))
            results['channel_removed'] = self.db.cursor.rowcount
            
            self.db.connection.commit()
            
            logger.info(f"Cleaned up data for channel {channel_id}: {results}")
            return results
            
        except Exception as e:
            logger.error(f"Error cleaning up channel {channel_id} data: {e}")
            return {'error': str(e)}
    
    async def optimize_database(self) -> Dict[str, any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            start_time = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            size_before = 0
            try:
                size_before = os.path.getsize(self.db.DATABASE_PATH)
            except:
                pass
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            self.db.cursor.execute('VACUUM')
            self.db.cursor.execute('REINDEX')
            self.db.cursor.execute('ANALYZE')
            self.db.cursor.execute('PRAGMA optimize')
            self.db.connection.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            size_after = 0
            try:
                size_after = os.path.getsize(self.db.DATABASE_PATH)
            except:
                pass
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            space_saved = max(0, size_before - size_after)
            space_saved_mb = round(space_saved / (1024 * 1024), 2)
            
            result = {
                'duration_seconds': round(duration, 2),
                'size_before_mb': round(size_before / (1024 * 1024), 2),
                'size_after_mb': round(size_after / (1024 * 1024), 2),
                'space_saved_mb': space_saved_mb,
                'optimization_time': end_time.isoformat()
            }
            
            logger.info(f"Database optimization completed: {result}")
            return result
            
        except Exception as e:
            logger.error(f"Error optimizing database: {e}")
            return {'error': str(e)}
    
    async def create_cleanup_report(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏"""
        try:
            stats = await self.get_cleanup_statistics()
            
            if 'error' in stats:
                return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–∏—Å—Ç–∫–∏: {stats['error']}"
            
            report = "üßπ <b>–û—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
            
            report += f"üìä <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:</b>\n"
            report += f"üóëÔ∏è –ò—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫: {stats['expired_links']}\n"
            report += f"‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {stats['used_up_links']}\n"
            report += f"üìã –°—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π: {stats['old_usage_records']}\n"
            report += f"üì¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats['inactive_channels']}\n"
            report += f"üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {stats['temp_files_count']}\n\n"
            
            report += f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
            report += f"üìÅ –†–∞–∑–º–µ—Ä: {stats['database_size_mb']} MB\n"
            report += f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ—á–∏—Å—Ç–∫–∏: {stats['cleanup_interval_hours']} —á.\n\n"
            
            report += f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
            for rec in stats['recommendations']:
                report += f"   ‚Ä¢ {rec}\n"
            
            report += f"\nüïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {stats['last_check'][:19]}"
            
            return report
            
        except Exception as e:
            logger.error(f"Error creating cleanup report: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"
    
    async def schedule_custom_cleanup(self, cleanup_type: str, delay_hours: int = 0) -> bool:
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏"""
        try:
            if delay_hours > 0:
                delay_seconds = delay_hours * 3600
                await asyncio.sleep(delay_seconds)
            
            if cleanup_type == "expired_links":
                result = self.db.cleanup_expired_links()
                logger.info(f"Scheduled cleanup of expired links: {result}")
            elif cleanup_type == "old_records":
                result = self.db.cleanup_old_usage_records()
                logger.info(f"Scheduled cleanup of old records: {result}")
            elif cleanup_type == "temp_files":
                result = await self._cleanup_temp_files()
                logger.info(f"Scheduled cleanup of temp files: {result}")
            elif cleanup_type == "full":
                result = await self.perform_full_cleanup()
                logger.info(f"Scheduled full cleanup: {result}")
            else:
                logger.warning(f"Unknown cleanup type: {cleanup_type}")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"Error in scheduled cleanup: {e}")
            return False
    
    async def get_cleanup_health_status(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏"""
        try:
            stats = await self.get_cleanup_statistics()
            
            if 'error' in stats:
                return "üî¥ –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—á–∏—Å—Ç–∫–∏"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            issues = 0
            
            if stats['expired_links'] > 1000:
                issues += 1
            if stats['old_usage_records'] > 5000:
                issues += 1
            if stats['temp_files_count'] > 50:
                issues += 1
            if stats['database_size_mb'] > 100:
                issues += 1
            
            if issues == 0:
                return "üü¢ –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
            elif issues <= 2:
                return "üü° –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
            else:
                return "üî¥ –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞"
                
        except Exception as e:
            logger.error(f"Error getting cleanup health status: {e}")
            return "üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è"