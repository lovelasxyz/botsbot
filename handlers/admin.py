import logging
import asyncio
import os
from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ChatMemberUpdated
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command, ChatMemberUpdatedFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

from models import AdminStates, ChannelManagementStates, LinkSettingsStates, UserManagementStates, StatsStates
from utils.keyboards import (
    get_admin_keyboard, get_channel_management_keyboard, get_user_management_keyboard,
    get_settings_keyboard, get_stats_keyboard, get_maintenance_keyboard,
    get_cancel_keyboard, get_yes_no_keyboard, get_start_keyboard
)
from utils.helpers import (
    check_admin, send_error_message, send_success_message, 
    cancel_state, format_user_list, format_channel_list
)

logger = logging.getLogger(__name__)
router = Router()

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip().isdigit()]
LINK_EXPIRE_HOURS = int(os.getenv('LINK_EXPIRE_HOURS', '1'))
MAX_LINK_USES = int(os.getenv('MAX_LINK_USES', '1'))

def get_welcome_message():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    import json
    settings_file = os.getenv('SETTINGS_FILE', 'bot_settings.json')
    try:
        if os.path.exists(settings_file):
            with open(settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
                return settings.get('welcome_message', get_default_welcome())
    except Exception as e:
        logger.error(f"Error loading welcome message: {e}")
    
    return get_default_welcome()

def get_default_welcome():
    """–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {bot_name})"""
    return f"""ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {{bot_name}}!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã.

üîí –ö–∞–∂–¥–∞—è —Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞—Å
‚è∞ –°—Å—ã–ª–∫–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ {LINK_EXPIRE_HOURS} —á–∞—Å–æ–≤

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫!"""

def update_welcome_message(new_message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    import json
    settings_file = os.getenv('SETTINGS_FILE', 'bot_settings.json')
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = {}
        if os.path.exists(settings_file):
            with open(settings_file, 'r', encoding='utf-8') as f:
                settings = json.load(f)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        settings['welcome_message'] = new_message
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(settings_file, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=2)
        
        return True
    except Exception as e:
        logger.error(f"Error updating welcome message: {e}")
        return False

# =============================================================================
# –û–°–ù–û–í–ù–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
# =============================================================================

@router.message(Command("admin"))
@router.message(F.text == "‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def cmd_admin(message: Message):
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = db.get_overall_stats()
    
    admin_text = f"üõ† <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
    admin_text += f"üì¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('active_channels', 0)}\n"
    admin_text += f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
    admin_text += f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {stats.get('active_links', 0)}\n"
    admin_text += f"üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('links_used_today', 0)}\n\n"
    admin_text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
    
    try:
        await message.answer(
            admin_text,
            parse_mode="HTML",
            reply_markup=get_admin_keyboard()
        )
    except Exception as e:
        logger.error(f"Error sending admin panel with HTML: {e}")
        # Fallback –±–µ–∑ HTML
        await message.answer(
            admin_text.replace('<b>', '').replace('</b>', ''),
            reply_markup=get_admin_keyboard()
        )

@router.message(F.text == "üîó –¢–µ–∫—É—â–∏–µ —Å—Å—ã–ª–∫–∏")
async def cmd_user_mode(message: Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    await message.answer(
        "üë§ –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –≤ —Ä–µ–∂–∏–º –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
        reply_markup=get_start_keyboard()
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    from .user import show_channel_links
    await show_channel_links(message, message.from_user.id)

# =============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ê–ù–ê–õ–ê–ú–ò
# =============================================================================

@router.message(F.text == "üì¢ –ö–∞–Ω–∞–ª—ã")
async def cmd_channels(message: Message):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    channels = db.get_all_channels()
    
    if not channels:
        await message.answer(
            "üì¢ –ö–∞–Ω–∞–ª–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏ –æ–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ.",
            reply_markup=get_channel_management_keyboard()
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
    await send_channels_list(message, channels)
    
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏:",
        reply_markup=get_channel_management_keyboard()
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def cmd_add_channel(message: Message, state: FSMContext):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    steps = (
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞:\n\n"
        "1) –û—Ç–∫—Ä–æ–π—Ç–µ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª –≤ Telegram\n"
        "2) –í —Ä–∞–∑–¥–µ–ª–µ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–æ–±–∞–≤—å—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (@{username})\n"
        "3) –î–∞–π—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è)\n\n"
        "–ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–∞—Ä—É–∂–∏—Ç –∫–∞–Ω–∞–ª –∏ –¥–æ–±–∞–≤–∏—Ç –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫.\n\n"
        "–õ–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—é–¥–∞:\n"
        "‚Ä¢ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ –∏–ª–∏ @username –∫–∞–Ω–∞–ª–∞\n"
        "‚Ä¢ –∏–ª–∏ chat_id (–Ω–∞–ø—Ä–∏–º–µ—Ä, -1001234567890)"
    )
    try:
        bot_info = await message.bot.get_me()
        steps = steps.format(username=bot_info.username)
    except Exception:
        steps = steps.format(username="your_bot")
    
    await message.answer(steps, reply_markup=get_cancel_keyboard())
    await state.set_state(AdminStates.waiting_for_channel_id)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–∞—Ç—á –ø–æ —Ç–µ–∫—Å—Ç—É –±–µ–∑ —ç–º–æ–¥–∑–∏
@router.message(F.text.contains("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª"))
async def cmd_add_channel_alias(message: Message, state: FSMContext):
    return await cmd_add_channel(message, state)

@router.message(AdminStates.waiting_for_channel_id)
async def process_add_channel_input(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    if await cancel_state(message, state):
        return
    
    try:
        chat = None
        # 1) –ü–æ–ø—ã—Ç–∫–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (@username –∏–ª–∏ chat_id)
        if message.text:
            text = message.text.strip()
            if text.startswith('@'):
                chat = await bot.get_chat(text)
            else:
                # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ chat_id
                try:
                    chat_id = int(text)
                    chat = await bot.get_chat(chat_id)
                except Exception:
                    pass
        
        # 2) –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if chat is None:
            try:
                if getattr(message, 'forward_origin', None):
                    origin = message.forward_origin
                    # aiogram v3: MessageOriginChannel has attribute chat
                    if hasattr(origin, 'chat') and origin.chat:
                        chat = origin.chat
                elif getattr(message, 'sender_chat', None):
                    chat = message.sender_chat
            except Exception:
                pass
        
        if chat is None:
            await send_error_message(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–Ω–∞–ª. –ü—Ä–∏—à–ª–∏—Ç–µ @username, chat_id –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.", reply_markup=get_cancel_keyboard())
            return
        
        chat_id = str(chat.id)
        title = getattr(chat, 'title', None) or getattr(chat, 'full_name', '–ö–∞–Ω–∞–ª')
        username = getattr(chat, 'username', None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
        is_admin = False
        try:
            member = await bot.get_chat_member(chat_id, bot.id)
            is_admin = getattr(member, 'status', '') == 'administrator'
        except Exception:
            pass
        
        invite_link = None
        if is_admin:
            try:
                link_obj = await bot.create_chat_invite_link(
                    chat_id=chat_id,
                    name=f"–û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ {title}",
                    creates_join_request=False
                )
                invite_link = link_obj.invite_link
            except Exception as e:
                logger.error(f"Error creating base invite link: {e}")
                if username:
                    invite_link = f"https://t.me/{username}"
        elif username:
            invite_link = f"https://t.me/{username}"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
        added = db.add_channel(chat_id, title, username, invite_link)
        if added:
            db.update_channel(chat_id, bot_is_admin=is_admin)
            await send_success_message(message, f" –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω: {title}\n–ê–¥–º–∏–Ω-–ø—Ä–∞–≤–∞: {'–¥–∞' if is_admin else '–Ω–µ—Ç'}")
        else:
            await send_error_message(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É.")
        
        await message.answer("–ö–∞–Ω–∞–ª—ã:", reply_markup=get_channel_management_keyboard())
        await state.clear()
    except Exception as e:
        logger.error(f"Error processing add channel input: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞.")
        await state.clear()

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def cmd_list_channels(message: Message):
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    channels = db.get_all_channels()
    await send_channels_list(message, channels)

async def send_channels_list(message: Message, channels: list):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏"""
    if not channels:
        await message.answer("üì¢ –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø—É—Å—Ç.")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ helpers
    formatted_parts = format_channel_list(channels)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
    for i, part in enumerate(formatted_parts):
        try:
            try:
                await message.answer(part, parse_mode="HTML")
            except Exception as e:
                logger.error(f"Error sending channel list part with HTML: {e}")
                # Fallback –±–µ–∑ HTML
                clean_part = part.replace('<b>', '').replace('</b>', '')
                await message.answer(clean_part)
            
            if i < len(formatted_parts) - 1:  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                await asyncio.sleep(0.2)
            
        except Exception as e:
            logger.error(f"Error sending channel list part {i + 1}: {e}")
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i + 1} —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤")

# =============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò  
# =============================================================================

# =============================================================================
# –ù–ê–°–¢–†–û–ô–ö–ò
# =============================================================================

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    current_expire = db.get_setting('link_expire_hours') or int(os.getenv('LINK_EXPIRE_HOURS', '24'))
    current_max_uses = db.get_setting('max_link_uses') or int(os.getenv('MAX_LINK_USES', '1'))
    auto_generation = db.get_setting('auto_generate_links', True)
    require_captcha = db.get_setting('require_captcha', True)
    
    settings_text = f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
    settings_text += f"‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫: {current_expire} —á.\n"
    settings_text += f"üî¢ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {current_max_uses}\n"
    settings_text += f"ü§ñ –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if auto_generation else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
    settings_text += f"üîí –ö–∞–ø—á–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if require_captcha else '‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∞'}\n"
    
    try:
        await message.answer(
            settings_text,
            parse_mode="HTML",
            reply_markup=get_settings_keyboard()
        )
    except Exception as e:
        logger.error(f"Error sending settings with HTML: {e}")
        # Fallback –±–µ–∑ HTML
        clean_settings = settings_text.replace('<b>', '').replace('</b>', '')
        await message.answer(clean_settings, reply_markup=get_settings_keyboard())

@router.message(F.text == "üîí –ö–∞–ø—á–∞: –≤–∫–ª/–≤—ã–∫–ª")
async def cmd_toggle_captcha(message: Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫–∞–ø—á–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    try:
        current = db.get_setting('require_captcha', True)
        new_value = not bool(current)
        if db.set_setting('require_captcha', new_value):
            status_text = "–≤–∫–ª—é—á–µ–Ω–∞" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
            await send_success_message(message, f"–ö–∞–ø—á–∞ {status_text}.")
        else:
            await send_error_message(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∫–∞–ø—á–∏.")
    except Exception as e:
        logger.error(f"Error toggling captcha: {e}")
        await send_error_message(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–ø—á–∏.")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
    await cmd_settings(message)

@router.message(F.text == "‚úèÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ")
async def cmd_edit_welcome(message: Message, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    current_welcome = get_welcome_message()
    
    await message.answer(
        f"‚úèÔ∏è <b>–¢–µ–∫—É—â–µ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n"
        f"{current_welcome}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å HTML):",
        parse_mode="HTML",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.waiting_for_welcome_message)

@router.message(AdminStates.waiting_for_welcome_message)
async def process_welcome_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if await cancel_state(message, state):
        return
    
    new_welcome = message.text.strip()
    if not new_welcome:
        await send_error_message(message, "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å HTML
    try:
        test_msg = await message.answer(new_welcome, parse_mode="HTML")
        await test_msg.delete()
        
        # –ï—Å–ª–∏ HTML –≤–∞–ª–∏–¥–Ω—ã–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if update_welcome_message(new_welcome):
            await send_success_message(message, "‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        else:
            await send_error_message(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            
    except Exception as e:
        logger.error(f"Invalid HTML in welcome message: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –≤ HTML-—Ä–∞–∑–º–µ—Ç–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤.")
    
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard())
    await state.clear()

# =============================================================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê
# =============================================================================

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_stats(message: Message):
    """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    await message.answer(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_stats_keyboard()
    )

@router.message(F.text == "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_overall_stats(message: Message):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    try:
        stats = db.get_overall_stats()
        db_info = db.get_database_info()
        
        stats_text = f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n\n"
        stats_text += f"üì¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {stats.get('active_channels', 0)}\n"
        stats_text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 0)}\n"
        stats_text += f"üîó –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫: {stats.get('active_links', 0)}\n"
        stats_text += f"üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats.get('links_used_today', 0)}\n\n"
        
        stats_text += f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        stats_text += f"üìÅ –†–∞–∑–º–µ—Ä: {db_info.get('db_size_mb', 0)} MB\n"
        stats_text += f"üìã –ó–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö:\n"
        stats_text += f"   ‚Ä¢ –ö–∞–Ω–∞–ª—ã: {db_info.get('channels_count', 0)}\n"
        stats_text += f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {db_info.get('users_count', 0)}\n"
        stats_text += f"   ‚Ä¢ –°—Å—ã–ª–∫–∏: {db_info.get('personal_invite_links_count', 0)}\n"
        stats_text += f"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {db_info.get('link_usage_count', 0)}\n\n"
        
        stats_text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        
        try:
            await message.answer(stats_text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error sending stats with HTML: {e}")
            # Fallback –±–µ–∑ HTML
            clean_stats = stats_text.replace('<b>', '').replace('</b>', '')
            await message.answer(clean_stats)
            
    except Exception as e:
        logger.error(f"Error getting overall stats: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
    
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:", reply_markup=get_stats_keyboard())

# =============================================================================
# –†–ê–°–°–´–õ–ö–ê
# =============================================================================



# =============================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô –ö–ê–ù–ê–õ–û–í
# =============================================================================

@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=True))
async def on_bot_chat_member_updated(event: ChatMemberUpdated, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö"""
    try:
        chat = event.chat
        new_status = event.new_chat_member.status
        old_status = event.old_chat_member.status
        
        def _status_value(status) -> str:
            try:
                return status.value if hasattr(status, 'value') else str(status)
            except Exception:
                return str(status)
        
        new_status_val = _status_value(new_status)
        old_status_val = _status_value(old_status)
        
        logger.info(f"Bot status changed in {chat.title} ({chat.id}): {old_status_val} -> {new_status_val}")
        
        # –ï—Å–ª–∏ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –∫–∞–Ω–∞–ª
        if (
            new_status_val in {'administrator', 'member'}
            and old_status_val in {'left', 'kicked'}
        ):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª
            if chat.type == 'channel':
                await handle_bot_added_to_channel(chat, new_status_val == 'administrator', bot)
        
        # –ï—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞
        elif (
            new_status_val in {'left', 'kicked'}
            and old_status_val in {'administrator', 'member'}
        ):
            if chat.type == 'channel':
                await handle_bot_removed_from_channel(chat, bot)
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è (—Å—Ç–∞–ª –∞–¥–º–∏–Ω–æ–º)
        elif (
            new_status_val == 'administrator'
            and old_status_val == 'member'
        ):
            await handle_bot_became_admin(chat, bot)
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è (–ø–æ—Ç–µ—Ä—è–ª –∞–¥–º–∏–Ω—Å—Ç–≤–æ)
        elif (
            new_status_val == 'member'
            and old_status_val == 'administrator'
        ):
            await handle_bot_lost_admin(chat, bot)
            
    except Exception as e:
        logger.error(f"Error handling chat member update: {e}")

async def handle_bot_added_to_channel(chat, is_admin: bool, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª"""
    try:
        chat_id = str(chat.id)
        title = chat.title
        username = chat.username
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        invite_link = None
        if is_admin:
            try:
                # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞
                link_obj = await bot.create_chat_invite_link(
                    chat_id=chat_id,
                    name=f"–û—Å–Ω–æ–≤–Ω–∞—è —Å—Å—ã–ª–∫–∞ {title}",
                    creates_join_request=False
                )
                invite_link = link_obj.invite_link
                logger.info(f"Created base invite link for channel {title}")
            except Exception as e:
                logger.error(f"Error creating invite link: {e}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É –∫–∞–Ω–∞–ª–∞
                if username:
                    invite_link = f"https://t.me/{username}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–∞–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        success = db.add_channel(chat_id, title, username, invite_link)
        if success:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
            db.update_channel(chat_id, bot_is_admin=is_admin)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await notify_admins_channel_added(bot, title, chat_id, is_admin)
            
            logger.info(f"Channel {title} added to database")
        else:
            logger.error(f"Failed to add channel {title} to database")
            
    except Exception as e:
        logger.error(f"Error handling bot added to channel: {e}")

async def handle_bot_removed_from_channel(chat, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        chat_id = str(chat.id)
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        success = db.remove_channel(chat_id)
        if success:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            await notify_admins_channel_removed(bot, chat.title, chat_id)
            logger.info(f"Channel {chat.title} removed from database")
        else:
            logger.error(f"Failed to remove channel {chat.title} from database")
            
    except Exception as e:
        logger.error(f"Error handling bot removed from channel: {e}")

async def handle_bot_became_admin(chat, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    try:
        chat_id = str(chat.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        db.update_channel(chat_id, bot_is_admin=True)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        try:
            link_obj = await bot.create_chat_invite_link(
                chat_id=chat_id,
                name=f"–ê–¥–º–∏–Ω—Å–∫–∞—è —Å—Å—ã–ª–∫–∞ {chat.title}",
                creates_join_request=False
            )
            db.update_channel(chat_id, invite_link=link_obj.invite_link)
            logger.info(f"Created admin invite link for channel {chat.title}")
        except Exception as e:
            logger.error(f"Error creating admin invite link: {e}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_bot_became_admin(bot, chat.title, chat_id)
        
    except Exception as e:
        logger.error(f"Error handling bot became admin: {e}")

async def handle_bot_lost_admin(chat, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ—Ä–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    try:
        chat_id = str(chat.id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        db.update_channel(chat_id, bot_is_admin=False)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await notify_admins_bot_lost_admin(bot, chat.title, chat_id)
        
    except Exception as e:
        logger.error(f"Error handling bot lost admin: {e}")

# =============================================================================
# –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ê–î–ú–ò–ù–û–í
# =============================================================================

async def notify_admins_channel_added(bot: Bot, title: str, chat_id: str, is_admin: bool):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª"""
    status_text = "üëë —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" if is_admin else "üë§ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫"
    notification = f"üì¢ <b>–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª!</b>\n\n"
    notification += f"üì∫ –ö–∞–Ω–∞–ª: {title}\n"
    notification += f"üÜî ID: {chat_id}\n"
    notification += f"ü§ñ –°—Ç–∞—Ç—É—Å: {status_text}\n"
    notification += f"‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, notification, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

async def notify_admins_channel_removed(bot: Bot, title: str, chat_id: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    notification = f"‚ùå <b>–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞!</b>\n\n"
    notification += f"üì∫ –ö–∞–Ω–∞–ª: {title}\n"
    notification += f"üÜî ID: {chat_id}\n"
    notification += f"üóëÔ∏è –í—Å–µ —Å—Å—ã–ª–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã\n"
    notification += f"‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, notification, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

async def notify_admins_bot_became_admin(bot: Bot, title: str, chat_id: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    notification = f"üëë <b>–ë–æ—Ç –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
    notification += f"üì∫ –ö–∞–Ω–∞–ª: {title}\n"
    notification += f"üÜî ID: {chat_id}\n"
    notification += f"üîó –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è\n"
    notification += f"‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, notification, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

async def notify_admins_bot_lost_admin(bot: Bot, title: str, chat_id: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ—Ç–µ—Ä–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞"""
    notification = f"üìâ <b>–ë–æ—Ç –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!</b>\n\n"
    notification += f"üì∫ –ö–∞–Ω–∞–ª: {title}\n"
    notification += f"üÜî ID: {chat_id}\n"
    notification += f"‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
    notification += f"‚è∞ {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
    
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(admin_id, notification, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Failed to notify admin {admin_id}: {e}")

# =============================================================================
# –û–ë–°–õ–£–ñ–ò–í–ê–ù–ò–ï
# =============================================================================

@router.message(F.text == "üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ")
async def cmd_maintenance(message: Message):
    """–ú–µ–Ω—é –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    await message.answer(
        "üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=get_maintenance_keyboard()
    )

@router.message(F.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ")
async def cmd_cleanup_expired(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    try:
        expired_count = db.cleanup_expired_links()
        
        await send_success_message(
            message,
            f"üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö —Å—Å—ã–ª–æ–∫: {expired_count}"
        )
        
    except Exception as e:
        logger.error(f"Error cleaning expired links: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Å—ã–ª–æ–∫.")
    
    await message.answer("–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:", reply_markup=get_maintenance_keyboard())

@router.message(F.text == "üîÑ –ü–µ—Ä–µ–≥–µ–Ω. –≤—Å–µ —Å—Å—ã–ª–∫–∏")
async def cmd_regenerate_all_links(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫...")
    
    try:
        regenerated_count = db.force_regenerate_all_links(os.getenv('BOT_TOKEN'))
        
        await send_success_message(
            message,
            f"‚úÖ –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫: {regenerated_count}"
        )
        
    except Exception as e:
        logger.error(f"Error regenerating all links: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫.")
    
    await message.answer("–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:", reply_markup=get_maintenance_keyboard())

@router.message(F.text == "üìã –ò–Ω—Ñ–æ –æ –ë–î")
async def cmd_db_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    try:
        db_info = db.get_database_info()
        
        info_text = f"üíæ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:</b>\n\n"
        info_text += f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {db_info.get('db_size_mb', 0)} MB\n"
        info_text += f"üìä –ü—É—Ç—å: {db.DATABASE_PATH}\n\n"
        info_text += f"üìã <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:</b>\n"
        info_text += f"   ‚Ä¢ –ö–∞–Ω–∞–ª—ã: {db_info.get('channels_count', 0)}\n"
        info_text += f"   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {db_info.get('users_count', 0)}\n"
        info_text += f"   ‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏: {db_info.get('personal_invite_links_count', 0)}\n"
        info_text += f"   ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {db_info.get('link_usage_count', 0)}\n"
        info_text += f"   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {db_info.get('channel_stats_count', 0)}\n"
        info_text += f"   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {db_info.get('bot_settings_count', 0)}\n\n"
        info_text += f"‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
        
        try:
            await message.answer(info_text, parse_mode="HTML")
        except Exception as e:
            logger.error(f"Error sending DB info with HTML: {e}")
            # Fallback –±–µ–∑ HTML
            clean_info = info_text.replace('<b>', '').replace('</b>', '')
            await message.answer(clean_info)
            
    except Exception as e:
        logger.error(f"Error getting database info: {e}")
        await send_error_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î.")
    
    await message.answer("–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ:", reply_markup=get_maintenance_keyboard())

# =============================================================================
# –£–ü–†–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ô–ö–ê–ú–ò –°–°–´–õ–û–ö
# =============================================================================

@router.message(F.text == "‚è∞ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫")
async def cmd_set_expire_time(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    current_expire = db.get_setting('link_expire_hours') or int(os.getenv('LINK_EXPIRE_HOURS', '24'))
    
    await message.answer(
        f"‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫: {current_expire} —á–∞—Å–æ–≤\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 168):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(LinkSettingsStates.waiting_for_expire_hours)

@router.message(LinkSettingsStates.waiting_for_expire_hours)
async def process_expire_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫"""
    if await cancel_state(message, state):
        return
    
    try:
        hours = int(message.text.strip())
        if not (1 <= hours <= 168):  # –û—Ç 1 —á–∞—Å–∞ –¥–æ –Ω–µ–¥–µ–ª–∏
            await send_error_message(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if db.set_setting('link_expire_hours', hours):
            await send_success_message(
                message,
                f"‚úÖ –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—Å—ã–ª–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {hours} —á."
            )
        else:
            await send_error_message(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
        
    except ValueError:
        await send_error_message(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard())
    await state.clear()

@router.message(F.text == "üî¢ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
async def cmd_set_max_uses(message: Message, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    current_max = db.get_setting('max_link_uses') or int(os.getenv('MAX_LINK_USES', '1'))
    
    await message.answer(
        f"üî¢ –¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {current_max}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–æ—Ç 1 –¥–æ 10):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(LinkSettingsStates.waiting_for_max_uses)

@router.message(LinkSettingsStates.waiting_for_max_uses)
async def process_max_uses(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏–º–∏—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π"""
    if await cancel_state(message, state):
        return
    
    try:
        max_uses = int(message.text.strip())
        if not (1 <= max_uses <= 100):
            await send_error_message(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 100.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if db.set_setting('max_link_uses', max_uses):
            await send_success_message(
                message,
                f"‚úÖ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {max_uses}"
            )
        else:
            await send_error_message(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É.")
        
    except ValueError:
        await send_error_message(message, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_settings_keyboard())
    await state.clear()

# =============================================================================
# –í–û–ó–í–†–ê–¢ –ö –ê–î–ú–ò–ù–ö–ï
# =============================================================================

@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ")
async def cmd_back_to_admin(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    await cmd_admin(message)

@router.message(F.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
async def cmd_back_general(message: Message):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" """
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.", reply_markup=get_start_keyboard())
        return
    
    await cmd_admin(message)

def setup(dp, bot, database, admin_ids, get_welcome_func, update_welcome_func):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥—É–ª—è
    global db, ADMIN_IDS
    db = database
    ADMIN_IDS = admin_ids
    
    # –ò–Ω—ä–µ–∫—Ü–∏—è –ë–î –≤ utils.helpers
    try:
        from utils.helpers import set_db
        set_db(database)
    except Exception:
        pass
    
    dp.include_router(router)